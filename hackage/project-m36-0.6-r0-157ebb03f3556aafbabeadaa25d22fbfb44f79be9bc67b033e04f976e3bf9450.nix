let
  buildDepError = pkg:
    builtins.throw ''
      The Haskell package set does not contain the package: ${pkg} (build dependency).
      
      If you are using Stackage, make sure that you are using a snapshot that contains the package. Otherwise you may need to update the Hackage snapshot you are using, usually by updating haskell.nix.
      '';
  sysDepError = pkg:
    builtins.throw ''
      The Nixpkgs package set does not contain the package: ${pkg} (system dependency).
      
      You may need to augment the system package mapping in haskell.nix so that it can be found.
      '';
  pkgConfDepError = pkg:
    builtins.throw ''
      The pkg-conf packages does not contain the package: ${pkg} (pkg-conf dependency).
      
      You may need to augment the pkg-conf package mapping in haskell.nix so that it can be found.
      '';
  exeDepError = pkg:
    builtins.throw ''
      The local executable components do not include the component: ${pkg} (executable dependency).
      '';
  legacyExeDepError = pkg:
    builtins.throw ''
      The Haskell package set does not contain the package: ${pkg} (executable dependency).
      
      If you are using Stackage, make sure that you are using a snapshot that contains the package. Otherwise you may need to update the Hackage snapshot you are using, usually by updating haskell.nix.
      '';
  buildToolDepError = pkg:
    builtins.throw ''
      Neither the Haskell package set or the Nixpkgs package set contain the package: ${pkg} (build tool dependency).
      
      If this is a system dependency:
      You may need to augment the system package mapping in haskell.nix so that it can be found.
      
      If this is a Haskell dependency:
      If you are using Stackage, make sure that you are using a snapshot that contains the package. Otherwise you may need to update the Hackage snapshot you are using, usually by updating haskell.nix.
      '';
in { system, compiler, flags, pkgs, hsPkgs, pkgconfPkgs, config, ... }:
  {
    flags = { profiler = false; stack = false; };
    package = {
      specVersion = "1.10";
      identifier = { name = "project-m36"; version = "0.6"; };
      license = "LicenseRef-PublicDomain";
      copyright = "";
      maintainer = "agentm@themactionfaction.com";
      author = "AgentM";
      homepage = "https://github.com/agentm/project-m36";
      url = "";
      synopsis = "Relational Algebra Engine";
      description = "A relational algebra engine which can be used to persist and query Haskell data types.";
      buildType = "Simple";
      };
    components = {
      "library" = {
        depends = (([
          (hsPkgs."base" or (buildDepError "base"))
          (hsPkgs."ghc" or (buildDepError "ghc"))
          (hsPkgs."ghc-paths" or (buildDepError "ghc-paths"))
          (hsPkgs."mtl" or (buildDepError "mtl"))
          (hsPkgs."containers" or (buildDepError "containers"))
          (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
          (hsPkgs."hashable" or (buildDepError "hashable"))
          (hsPkgs."haskeline" or (buildDepError "haskeline"))
          (hsPkgs."directory" or (buildDepError "directory"))
          (hsPkgs."MonadRandom" or (buildDepError "MonadRandom"))
          (hsPkgs."random-shuffle" or (buildDepError "random-shuffle"))
          (hsPkgs."uuid" or (buildDepError "uuid"))
          (hsPkgs."cassava" or (buildDepError "cassava"))
          (hsPkgs."text" or (buildDepError "text"))
          (hsPkgs."bytestring" or (buildDepError "bytestring"))
          (hsPkgs."deepseq" or (buildDepError "deepseq"))
          (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
          (hsPkgs."vector" or (buildDepError "vector"))
          (hsPkgs."parallel" or (buildDepError "parallel"))
          (hsPkgs."monad-parallel" or (buildDepError "monad-parallel"))
          (hsPkgs."exceptions" or (buildDepError "exceptions"))
          (hsPkgs."transformers" or (buildDepError "transformers"))
          (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
          (hsPkgs."binary" or (buildDepError "binary"))
          (hsPkgs."filepath" or (buildDepError "filepath"))
          (hsPkgs."zlib" or (buildDepError "zlib"))
          (hsPkgs."directory" or (buildDepError "directory"))
          (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
          (hsPkgs."temporary" or (buildDepError "temporary"))
          (hsPkgs."stm" or (buildDepError "stm"))
          (hsPkgs."time" or (buildDepError "time"))
          (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
          (hsPkgs."old-locale" or (buildDepError "old-locale"))
          (hsPkgs."rset" or (buildDepError "rset"))
          (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
          (hsPkgs."either" or (buildDepError "either"))
          (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
          (hsPkgs."data-interval" or (buildDepError "data-interval"))
          (hsPkgs."extended-reals" or (buildDepError "extended-reals"))
          (hsPkgs."network-transport" or (buildDepError "network-transport"))
          (hsPkgs."aeson" or (buildDepError "aeson"))
          (hsPkgs."path-pieces" or (buildDepError "path-pieces"))
          (hsPkgs."conduit" or (buildDepError "conduit"))
          (hsPkgs."resourcet" or (buildDepError "resourcet"))
          (hsPkgs."http-api-data" or (buildDepError "http-api-data"))
          (hsPkgs."semigroups" or (buildDepError "semigroups"))
          (hsPkgs."QuickCheck" or (buildDepError "QuickCheck"))
          (hsPkgs."quickcheck-instances" or (buildDepError "quickcheck-instances"))
          (hsPkgs."distributed-process-client-server" or (buildDepError "distributed-process-client-server"))
          (hsPkgs."distributed-process" or (buildDepError "distributed-process"))
          (hsPkgs."distributed-process-extras" or (buildDepError "distributed-process-extras"))
          (hsPkgs."distributed-process-async" or (buildDepError "distributed-process-async"))
          (hsPkgs."network-transport-tcp" or (buildDepError "network-transport-tcp"))
          (hsPkgs."network-transport" or (buildDepError "network-transport"))
          (hsPkgs."list-t" or (buildDepError "list-t"))
          (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
          (hsPkgs."foldl" or (buildDepError "foldl"))
          (hsPkgs."optparse-applicative" or (buildDepError "optparse-applicative"))
          (hsPkgs."Glob" or (buildDepError "Glob"))
          (hsPkgs."cryptohash-sha256" or (buildDepError "cryptohash-sha256"))
          ] ++ (if system.isWindows
          then [ (hsPkgs."Win32" or (buildDepError "Win32")) ]
          else [
            (hsPkgs."unix" or (buildDepError "unix"))
            ])) ++ (pkgs.lib).optionals (compiler.isGhc && (compiler.version).ge "8") [
          (hsPkgs."ghc-boot" or (buildDepError "ghc-boot"))
          (hsPkgs."ghci" or (buildDepError "ghci"))
          ]) ++ (pkgs.lib).optional (!flags.stack) (hsPkgs."deferred-folds" or (buildDepError "deferred-folds"));
        buildable = true;
        };
      exes = {
        "tutd" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."ghc" or (buildDepError "ghc"))
            (hsPkgs."ghc-paths" or (buildDepError "ghc-paths"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."transformers" or (buildDepError "transformers"))
            (hsPkgs."semigroups" or (buildDepError "semigroups"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."MonadRandom" or (buildDepError "MonadRandom"))
            (hsPkgs."MonadRandom" or (buildDepError "MonadRandom"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."random" or (buildDepError "random"))
            (hsPkgs."MonadRandom" or (buildDepError "MonadRandom"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."optparse-applicative" or (buildDepError "optparse-applicative"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."list-t" or (buildDepError "list-t"))
            ];
          buildable = true;
          };
        "project-m36-server" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."ghc" or (buildDepError "ghc"))
            (hsPkgs."ghc-paths" or (buildDepError "ghc-paths"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."transformers" or (buildDepError "transformers"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."optparse-applicative" or (buildDepError "optparse-applicative"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."http-api-data" or (buildDepError "http-api-data"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."list-t" or (buildDepError "list-t"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            ];
          buildable = true;
          };
        "bigrel" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."optparse-applicative" or (buildDepError "optparse-applicative"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."list-t" or (buildDepError "list-t"))
            (hsPkgs."ghc" or (buildDepError "ghc"))
            (hsPkgs."ghc-paths" or (buildDepError "ghc-paths"))
            (hsPkgs."transformers" or (buildDepError "transformers"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."random" or (buildDepError "random"))
            (hsPkgs."MonadRandom" or (buildDepError "MonadRandom"))
            (hsPkgs."semigroups" or (buildDepError "semigroups"))
            ];
          buildable = true;
          };
        "Example-SimpleClient" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."transformers" or (buildDepError "transformers"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."list-t" or (buildDepError "list-t"))
            (hsPkgs."ghc" or (buildDepError "ghc"))
            (hsPkgs."ghc-paths" or (buildDepError "ghc-paths"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."random" or (buildDepError "random"))
            (hsPkgs."MonadRandom" or (buildDepError "MonadRandom"))
            ];
          buildable = true;
          };
        "Example-OutOfTheTarpit" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."transformers" or (buildDepError "transformers"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."list-t" or (buildDepError "list-t"))
            (hsPkgs."aeson" or (buildDepError "aeson"))
            (hsPkgs."path-pieces" or (buildDepError "path-pieces"))
            (hsPkgs."either" or (buildDepError "either"))
            (hsPkgs."conduit" or (buildDepError "conduit"))
            (hsPkgs."http-api-data" or (buildDepError "http-api-data"))
            (hsPkgs."template-haskell" or (buildDepError "template-haskell"))
            (hsPkgs."ghc" or (buildDepError "ghc"))
            (hsPkgs."ghc-paths" or (buildDepError "ghc-paths"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            ];
          buildable = true;
          };
        "Example-Blog" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."transformers" or (buildDepError "transformers"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."list-t" or (buildDepError "list-t"))
            (hsPkgs."aeson" or (buildDepError "aeson"))
            (hsPkgs."path-pieces" or (buildDepError "path-pieces"))
            (hsPkgs."either" or (buildDepError "either"))
            (hsPkgs."conduit" or (buildDepError "conduit"))
            (hsPkgs."http-api-data" or (buildDepError "http-api-data"))
            (hsPkgs."template-haskell" or (buildDepError "template-haskell"))
            (hsPkgs."ghc" or (buildDepError "ghc"))
            (hsPkgs."ghc-paths" or (buildDepError "ghc-paths"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."scotty" or (buildDepError "scotty"))
            (hsPkgs."blaze-html" or (buildDepError "blaze-html"))
            (hsPkgs."http-types" or (buildDepError "http-types"))
            ];
          buildable = true;
          };
        "Example-Hair" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."transformers" or (buildDepError "transformers"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."list-t" or (buildDepError "list-t"))
            (hsPkgs."aeson" or (buildDepError "aeson"))
            (hsPkgs."path-pieces" or (buildDepError "path-pieces"))
            (hsPkgs."either" or (buildDepError "either"))
            (hsPkgs."conduit" or (buildDepError "conduit"))
            (hsPkgs."http-api-data" or (buildDepError "http-api-data"))
            (hsPkgs."template-haskell" or (buildDepError "template-haskell"))
            (hsPkgs."ghc" or (buildDepError "ghc"))
            (hsPkgs."ghc-paths" or (buildDepError "ghc-paths"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            ];
          buildable = true;
          };
        "Example-CustomTupleable" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."transformers" or (buildDepError "transformers"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."list-t" or (buildDepError "list-t"))
            (hsPkgs."aeson" or (buildDepError "aeson"))
            (hsPkgs."path-pieces" or (buildDepError "path-pieces"))
            (hsPkgs."either" or (buildDepError "either"))
            (hsPkgs."conduit" or (buildDepError "conduit"))
            (hsPkgs."http-api-data" or (buildDepError "http-api-data"))
            (hsPkgs."template-haskell" or (buildDepError "template-haskell"))
            (hsPkgs."ghc" or (buildDepError "ghc"))
            (hsPkgs."ghc-paths" or (buildDepError "ghc-paths"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            ];
          buildable = true;
          };
        "project-m36-websocket-server" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."aeson" or (buildDepError "aeson"))
            (hsPkgs."path-pieces" or (buildDepError "path-pieces"))
            (hsPkgs."either" or (buildDepError "either"))
            (hsPkgs."conduit" or (buildDepError "conduit"))
            (hsPkgs."http-api-data" or (buildDepError "http-api-data"))
            (hsPkgs."template-haskell" or (buildDepError "template-haskell"))
            (hsPkgs."websockets" or (buildDepError "websockets"))
            (hsPkgs."aeson" or (buildDepError "aeson"))
            (hsPkgs."optparse-applicative" or (buildDepError "optparse-applicative"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."random" or (buildDepError "random"))
            (hsPkgs."MonadRandom" or (buildDepError "MonadRandom"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."network-transport-tcp" or (buildDepError "network-transport-tcp"))
            (hsPkgs."semigroups" or (buildDepError "semigroups"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            ];
          buildable = true;
          };
        "handles" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."optparse-applicative" or (buildDepError "optparse-applicative"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."list-t" or (buildDepError "list-t"))
            (hsPkgs."ghc" or (buildDepError "ghc"))
            (hsPkgs."ghc-paths" or (buildDepError "ghc-paths"))
            (hsPkgs."transformers" or (buildDepError "transformers"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."random" or (buildDepError "random"))
            (hsPkgs."MonadRandom" or (buildDepError "MonadRandom"))
            (hsPkgs."semigroups" or (buildDepError "semigroups"))
            ];
          buildable = true;
          };
        };
      tests = {
        "test-tutoriald" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."list-t" or (buildDepError "list-t"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."random" or (buildDepError "random"))
            (hsPkgs."MonadRandom" or (buildDepError "MonadRandom"))
            (hsPkgs."semigroups" or (buildDepError "semigroups"))
            ];
          buildable = true;
          };
        "test-tutoriald-atomfunctionscript" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."random" or (buildDepError "random"))
            (hsPkgs."MonadRandom" or (buildDepError "MonadRandom"))
            (hsPkgs."semigroups" or (buildDepError "semigroups"))
            (hsPkgs."time" or (buildDepError "time"))
            ];
          buildable = true;
          };
        "test-tutoriald-databasecontextfunctionscript" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."random" or (buildDepError "random"))
            (hsPkgs."MonadRandom" or (buildDepError "MonadRandom"))
            (hsPkgs."semigroups" or (buildDepError "semigroups"))
            (hsPkgs."time" or (buildDepError "time"))
            ];
          buildable = true;
          };
        "test-relation" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."transformers" or (buildDepError "transformers"))
            ];
          buildable = true;
          };
        "test-static-optimizer" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."transformers" or (buildDepError "transformers"))
            ];
          buildable = true;
          };
        "test-transactiongraph-persist" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."random" or (buildDepError "random"))
            (hsPkgs."MonadRandom" or (buildDepError "MonadRandom"))
            (hsPkgs."semigroups" or (buildDepError "semigroups"))
            ];
          buildable = true;
          };
        "test-relation-import-csv" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            ];
          buildable = true;
          };
        "test-tutoriald-import-tutoriald" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."random" or (buildDepError "random"))
            (hsPkgs."MonadRandom" or (buildDepError "MonadRandom"))
            (hsPkgs."semigroups" or (buildDepError "semigroups"))
            ];
          buildable = true;
          };
        "test-relation-export-csv" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            ];
          buildable = true;
          };
        "test-transactiongraph-merge" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."template-haskell" or (buildDepError "template-haskell"))
            (hsPkgs."transformers" or (buildDepError "transformers"))
            (hsPkgs."aeson" or (buildDepError "aeson"))
            (hsPkgs."conduit" or (buildDepError "conduit"))
            (hsPkgs."either" or (buildDepError "either"))
            (hsPkgs."path-pieces" or (buildDepError "path-pieces"))
            (hsPkgs."http-api-data" or (buildDepError "http-api-data"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."list-t" or (buildDepError "list-t"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            ];
          buildable = true;
          };
        "test-server" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."network-transport-tcp" or (buildDepError "network-transport-tcp"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."transformers" or (buildDepError "transformers"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."list-t" or (buildDepError "list-t"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."network-transport" or (buildDepError "network-transport"))
            (hsPkgs."semigroups" or (buildDepError "semigroups"))
            ];
          buildable = true;
          };
        "test-scripts" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."network-transport-tcp" or (buildDepError "network-transport-tcp"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."transformers" or (buildDepError "transformers"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."list-t" or (buildDepError "list-t"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."random" or (buildDepError "random"))
            (hsPkgs."MonadRandom" or (buildDepError "MonadRandom"))
            (hsPkgs."semigroups" or (buildDepError "semigroups"))
            ];
          buildable = true;
          };
        "test-websocket-server" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."transformers" or (buildDepError "transformers"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."list-t" or (buildDepError "list-t"))
            (hsPkgs."websockets" or (buildDepError "websockets"))
            (hsPkgs."optparse-applicative" or (buildDepError "optparse-applicative"))
            (hsPkgs."network" or (buildDepError "network"))
            (hsPkgs."aeson" or (buildDepError "aeson"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."random" or (buildDepError "random"))
            (hsPkgs."MonadRandom" or (buildDepError "MonadRandom"))
            (hsPkgs."network-transport-tcp" or (buildDepError "network-transport-tcp"))
            (hsPkgs."semigroups" or (buildDepError "semigroups"))
            ];
          buildable = true;
          };
        "test-isomorphic-schemas" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."transformers" or (buildDepError "transformers"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."list-t" or (buildDepError "list-t"))
            (hsPkgs."websockets" or (buildDepError "websockets"))
            (hsPkgs."optparse-applicative" or (buildDepError "optparse-applicative"))
            (hsPkgs."network" or (buildDepError "network"))
            (hsPkgs."aeson" or (buildDepError "aeson"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            ];
          buildable = true;
          };
        "test-atomable" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."transformers" or (buildDepError "transformers"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."list-t" or (buildDepError "list-t"))
            (hsPkgs."websockets" or (buildDepError "websockets"))
            (hsPkgs."optparse-applicative" or (buildDepError "optparse-applicative"))
            (hsPkgs."network" or (buildDepError "network"))
            (hsPkgs."aeson" or (buildDepError "aeson"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."random" or (buildDepError "random"))
            (hsPkgs."MonadRandom" or (buildDepError "MonadRandom"))
            (hsPkgs."semigroups" or (buildDepError "semigroups"))
            ];
          buildable = true;
          };
        "test-multiprocess-access" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."transformers" or (buildDepError "transformers"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."list-t" or (buildDepError "list-t"))
            (hsPkgs."websockets" or (buildDepError "websockets"))
            (hsPkgs."optparse-applicative" or (buildDepError "optparse-applicative"))
            (hsPkgs."network" or (buildDepError "network"))
            (hsPkgs."aeson" or (buildDepError "aeson"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."random" or (buildDepError "random"))
            (hsPkgs."MonadRandom" or (buildDepError "MonadRandom"))
            ];
          buildable = true;
          };
        "test-transactiongraph-automerge" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."transformers" or (buildDepError "transformers"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."list-t" or (buildDepError "list-t"))
            (hsPkgs."websockets" or (buildDepError "websockets"))
            (hsPkgs."optparse-applicative" or (buildDepError "optparse-applicative"))
            (hsPkgs."network" or (buildDepError "network"))
            (hsPkgs."aeson" or (buildDepError "aeson"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."random" or (buildDepError "random"))
            (hsPkgs."MonadRandom" or (buildDepError "MonadRandom"))
            (hsPkgs."semigroups" or (buildDepError "semigroups"))
            ];
          buildable = true;
          };
        "test-tupleable" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."transformers" or (buildDepError "transformers"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."list-t" or (buildDepError "list-t"))
            (hsPkgs."websockets" or (buildDepError "websockets"))
            (hsPkgs."optparse-applicative" or (buildDepError "optparse-applicative"))
            (hsPkgs."network" or (buildDepError "network"))
            (hsPkgs."aeson" or (buildDepError "aeson"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."random" or (buildDepError "random"))
            (hsPkgs."MonadRandom" or (buildDepError "MonadRandom"))
            (hsPkgs."semigroups" or (buildDepError "semigroups"))
            ];
          buildable = true;
          };
        "test-client-simple" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."transformers" or (buildDepError "transformers"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."list-t" or (buildDepError "list-t"))
            (hsPkgs."websockets" or (buildDepError "websockets"))
            (hsPkgs."optparse-applicative" or (buildDepError "optparse-applicative"))
            (hsPkgs."network" or (buildDepError "network"))
            (hsPkgs."aeson" or (buildDepError "aeson"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."random" or (buildDepError "random"))
            (hsPkgs."MonadRandom" or (buildDepError "MonadRandom"))
            (hsPkgs."semigroups" or (buildDepError "semigroups"))
            ];
          buildable = true;
          };
        "test-dataframe" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."transformers" or (buildDepError "transformers"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."list-t" or (buildDepError "list-t"))
            (hsPkgs."websockets" or (buildDepError "websockets"))
            (hsPkgs."optparse-applicative" or (buildDepError "optparse-applicative"))
            (hsPkgs."network" or (buildDepError "network"))
            (hsPkgs."aeson" or (buildDepError "aeson"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."random" or (buildDepError "random"))
            (hsPkgs."MonadRandom" or (buildDepError "MonadRandom"))
            (hsPkgs."semigroups" or (buildDepError "semigroups"))
            ];
          buildable = true;
          };
        };
      benchmarks = {
        "basic-benchmark" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."criterion" or (buildDepError "criterion"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."transformers" or (buildDepError "transformers"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            ];
          buildable = true;
          };
        "bench" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."HUnit" or (buildDepError "HUnit"))
            (hsPkgs."Cabal" or (buildDepError "Cabal"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."hashable" or (buildDepError "hashable"))
            (hsPkgs."unordered-containers" or (buildDepError "unordered-containers"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."vector" or (buildDepError "vector"))
            (hsPkgs."vector-binary-instances" or (buildDepError "vector-binary-instances"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."hashable-time" or (buildDepError "hashable-time"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."uuid" or (buildDepError "uuid"))
            (hsPkgs."stm" or (buildDepError "stm"))
            (hsPkgs."deepseq" or (buildDepError "deepseq"))
            (hsPkgs."deepseq-generics" or (buildDepError "deepseq-generics"))
            (hsPkgs."binary" or (buildDepError "binary"))
            (hsPkgs."parallel" or (buildDepError "parallel"))
            (hsPkgs."cassava" or (buildDepError "cassava"))
            (hsPkgs."attoparsec" or (buildDepError "attoparsec"))
            (hsPkgs."gnuplot" or (buildDepError "gnuplot"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."temporary" or (buildDepError "temporary"))
            (hsPkgs."haskeline" or (buildDepError "haskeline"))
            (hsPkgs."megaparsec" or (buildDepError "megaparsec"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."base64-bytestring" or (buildDepError "base64-bytestring"))
            (hsPkgs."data-interval" or (buildDepError "data-interval"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."criterion" or (buildDepError "criterion"))
            (hsPkgs."stm-containers" or (buildDepError "stm-containers"))
            (hsPkgs."project-m36" or (buildDepError "project-m36"))
            ];
          buildable = true;
          };
        };
      };
    }