let
  buildDepError = pkg:
    builtins.throw ''
      The Haskell package set does not contain the package: ${pkg} (build dependency).
      
      If you are using Stackage, make sure that you are using a snapshot that contains the package. Otherwise you may need to update the Hackage snapshot you are using, usually by updating haskell.nix.
      '';
  sysDepError = pkg:
    builtins.throw ''
      The Nixpkgs package set does not contain the package: ${pkg} (system dependency).
      
      You may need to augment the system package mapping in haskell.nix so that it can be found.
      '';
  pkgConfDepError = pkg:
    builtins.throw ''
      The pkg-conf packages does not contain the package: ${pkg} (pkg-conf dependency).
      
      You may need to augment the pkg-conf package mapping in haskell.nix so that it can be found.
      '';
  exeDepError = pkg:
    builtins.throw ''
      The local executable components do not include the component: ${pkg} (executable dependency).
      '';
  legacyExeDepError = pkg:
    builtins.throw ''
      The Haskell package set does not contain the package: ${pkg} (executable dependency).
      
      If you are using Stackage, make sure that you are using a snapshot that contains the package. Otherwise you may need to update the Hackage snapshot you are using, usually by updating haskell.nix.
      '';
  buildToolDepError = pkg:
    builtins.throw ''
      Neither the Haskell package set or the Nixpkgs package set contain the package: ${pkg} (build tool dependency).
      
      If this is a system dependency:
      You may need to augment the system package mapping in haskell.nix so that it can be found.
      
      If this is a Haskell dependency:
      If you are using Stackage, make sure that you are using a snapshot that contains the package. Otherwise you may need to update the Hackage snapshot you are using, usually by updating haskell.nix.
      '';
in { system, compiler, flags, pkgs, hsPkgs, pkgconfPkgs, config, ... }:
  {
    flags = {};
    package = {
      specVersion = "1.2";
      identifier = { name = "hurdle"; version = "0.4.0"; };
      license = "BSD-3-Clause";
      copyright = "Stephen Tetley <stephen.tetley@gmail.com>";
      maintainer = "Stephen Tetley <stephen.tetley@gmail.com>";
      author = "";
      homepage = "http://code.google.com/p/copperbox/";
      url = "";
      synopsis = "Extract function names from Windows DLLs. ";
      description = "Hurdle - (H)askell (U)tilty (R)egarding (DL)l (E)xports.\n\nExtract function names from Windows DLLs a-la pexports.\n\nHurdle has minimal dependencies: base, containers, and\nkangaroo (kangaroo just needs base and array).\n\nCurrently Hurdle also has minimal utility - please consider\npexports instead as Hurdle doesn't yet print ordinals and\nfails on DLLs generated by Visual C++ (which puts function\nsymbols in the .rdata section - gcc uses the .edata section).\n\nHurdle was a Sunday afternoon hack that has taken a good while\nlonger...\n\n\nChange-log\n\n0.3.0 to 0.4.0\n\n* Changed to use kangaroo-0.4.0\n\n0.2.0 to 0.3.0\n\n* Changes to use kangaroo-0.2.0\n\n0.1.0 to 0.2.0\n\n* Changed to use kangaroo binary parser combinators.\n* Added error message reporting parser failure when\n.edata section is not found.\n";
      buildType = "Simple";
      };
    components = {
      exes = {
        "hurdle" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."array" or (buildDepError "array"))
            (hsPkgs."containers" or (buildDepError "containers"))
            (hsPkgs."kangaroo" or (buildDepError "kangaroo"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            ];
          buildable = true;
          };
        };
      };
    }