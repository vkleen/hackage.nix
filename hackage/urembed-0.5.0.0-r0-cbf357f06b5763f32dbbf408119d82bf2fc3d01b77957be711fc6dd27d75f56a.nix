let
  buildDepError = pkg:
    builtins.throw ''
      The Haskell package set does not contain the package: ${pkg} (build dependency).
      
      If you are using Stackage, make sure that you are using a snapshot that contains the package. Otherwise you may need to update the Hackage snapshot you are using, usually by updating haskell.nix.
      '';
  sysDepError = pkg:
    builtins.throw ''
      The Nixpkgs package set does not contain the package: ${pkg} (system dependency).
      
      You may need to augment the system package mapping in haskell.nix so that it can be found.
      '';
  pkgConfDepError = pkg:
    builtins.throw ''
      The pkg-conf packages does not contain the package: ${pkg} (pkg-conf dependency).
      
      You may need to augment the pkg-conf package mapping in haskell.nix so that it can be found.
      '';
  exeDepError = pkg:
    builtins.throw ''
      The local executable components do not include the component: ${pkg} (executable dependency).
      '';
  legacyExeDepError = pkg:
    builtins.throw ''
      The Haskell package set does not contain the package: ${pkg} (executable dependency).
      
      If you are using Stackage, make sure that you are using a snapshot that contains the package. Otherwise you may need to update the Hackage snapshot you are using, usually by updating haskell.nix.
      '';
  buildToolDepError = pkg:
    builtins.throw ''
      Neither the Haskell package set or the Nixpkgs package set contain the package: ${pkg} (build tool dependency).
      
      If this is a system dependency:
      You may need to augment the system package mapping in haskell.nix so that it can be found.
      
      If this is a Haskell dependency:
      If you are using Stackage, make sure that you are using a snapshot that contains the package. Otherwise you may need to update the Hackage snapshot you are using, usually by updating haskell.nix.
      '';
in { system, compiler, flags, pkgs, hsPkgs, pkgconfPkgs, config, ... }:
  {
    flags = {};
    package = {
      specVersion = "1.8";
      identifier = { name = "urembed"; version = "0.5.0.0"; };
      license = "BSD-3-Clause";
      copyright = "";
      maintainer = "grrwlf@gmail.com";
      author = "Sergey Mironov";
      homepage = "http://github.com/grwlf/urembed";
      url = "";
      synopsis = "Ur/Web static content generator";
      description = "Urembed converts a set of FILEs into the Ur/Web modules. Each Module will contain\nfollowing functions:\nval binary : unit -> transaction blob\nval blobpage : unit -> transaction page\nval text : unit -> transaction string\nAdditionally, FFI signatures will be provided for JavaScript files. In order\nto enable this, you have to name your JS functions using the name__type\nscheme. See README for details. Also, uru project uses this a lot.\n(NOTE: the interface is not stable. Pleas, fork the Urembed sources\nbefore using)\nThe master project (specified with -o FILE.urp) will contain a dictionary\nversion of those functions taking the datatype key as an argument, instead of\nunit. In order to actually compile the binaries, you have to call\nmake -f FILE.mk CC=.. LD=.. UR_INCLUDE_DIR=.. urp\nWhere FILE.mk is the Makefile, generated by urembed.\nExample: urembed -o static/Static.urp Style.css Script.js\nmake -C static -f Static.mk CC=gcc LD=ld UR_INCLUDE_DIR=/usr/local/include/urweb urp\nNote: output directory should exist";
      buildType = "Simple";
      };
    components = {
      exes = {
        "urembed" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."mtl" or (buildDepError "mtl"))
            (hsPkgs."language-javascript" or (buildDepError "language-javascript"))
            (hsPkgs."process" or (buildDepError "process"))
            (hsPkgs."filepath" or (buildDepError "filepath"))
            (hsPkgs."syb" or (buildDepError "syb"))
            (hsPkgs."optparse-applicative" or (buildDepError "optparse-applicative"))
            (hsPkgs."directory" or (buildDepError "directory"))
            (hsPkgs."mime-types" or (buildDepError "mime-types"))
            (hsPkgs."text" or (buildDepError "text"))
            (hsPkgs."bytestring" or (buildDepError "bytestring"))
            (hsPkgs."cake3" or (buildDepError "cake3"))
            ];
          buildable = true;
          };
        };
      };
    }