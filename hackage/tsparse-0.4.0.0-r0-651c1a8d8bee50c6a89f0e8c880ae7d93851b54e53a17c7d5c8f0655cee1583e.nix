let
  buildDepError = pkg:
    builtins.throw ''
      The Haskell package set does not contain the package: ${pkg} (build dependency).
      
      If you are using Stackage, make sure that you are using a snapshot that contains the package. Otherwise you may need to update the Hackage snapshot you are using, usually by updating haskell.nix.
      '';
  sysDepError = pkg:
    builtins.throw ''
      The Nixpkgs package set does not contain the package: ${pkg} (system dependency).
      
      You may need to augment the system package mapping in haskell.nix so that it can be found.
      '';
  pkgConfDepError = pkg:
    builtins.throw ''
      The pkg-conf packages does not contain the package: ${pkg} (pkg-conf dependency).
      
      You may need to augment the pkg-conf package mapping in haskell.nix so that it can be found.
      '';
  exeDepError = pkg:
    builtins.throw ''
      The local executable components do not include the component: ${pkg} (executable dependency).
      '';
  legacyExeDepError = pkg:
    builtins.throw ''
      The Haskell package set does not contain the package: ${pkg} (executable dependency).
      
      If you are using Stackage, make sure that you are using a snapshot that contains the package. Otherwise you may need to update the Hackage snapshot you are using, usually by updating haskell.nix.
      '';
  buildToolDepError = pkg:
    builtins.throw ''
      Neither the Haskell package set or the Nixpkgs package set contain the package: ${pkg} (build tool dependency).
      
      If this is a system dependency:
      You may need to augment the system package mapping in haskell.nix so that it can be found.
      
      If this is a Haskell dependency:
      If you are using Stackage, make sure that you are using a snapshot that contains the package. Otherwise you may need to update the Hackage snapshot you are using, usually by updating haskell.nix.
      '';
in { system, compiler, flags, pkgs, hsPkgs, pkgconfPkgs, config, ... }:
  {
    flags = { test = false; };
    package = {
      specVersion = "1.8";
      identifier = { name = "tsparse"; version = "0.4.0.0"; };
      license = "BSD-3-Clause";
      copyright = "";
      maintainer = "omari@smileystation.com";
      author = "Omari Norman";
      homepage = "http://www.github.com/massysett/tsparse";
      url = "";
      synopsis = "Parses U.S. federal Thrift Savings Plan PDF quarterly statements";
      description = "See the TsParse module for details.\n\nThere are also multiple tests in the package, but these are not built\nby default.  To get the tests, build with the \"test\" flag.\n\nBinaries you will get if you build with the \"test\" flag:\n\n* parse-tsp-pdf - given a single command-line argument which is the\nfilename of a TSP PDF statement, will pretty print the data in\nthe file.\n\n* parse-tsp-text - given a single command-line argument which is the\nfilename of TSP data that is output from pdftotext (or is\ngenerated by gen-tsp), pretty prints the data in the file.  If no\nfilename, reads standard input.\n\n* test-tsp - tests all QuickCheck properties in the library.\n\n* gen-tsp - given a single command-line argument which is the\nQuickCheck \"size\" parameter (this should be a non-negative\ninteger), generates a valid input to the parse-tsp-text file.  The\nbigger the number, the more text you get.";
      buildType = "Simple";
      };
    components = {
      "library" = {
        depends = [
          (hsPkgs."base" or (buildDepError "base"))
          (hsPkgs."Decimal" or (buildDepError "Decimal"))
          (hsPkgs."time" or (buildDepError "time"))
          (hsPkgs."split" or (buildDepError "split"))
          (hsPkgs."parsec" or (buildDepError "parsec"))
          (hsPkgs."process" or (buildDepError "process"))
          (hsPkgs."pretty" or (buildDepError "pretty"))
          ];
        buildable = true;
        };
      exes = {
        "parse-tsp-pdf" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."Decimal" or (buildDepError "Decimal"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."split" or (buildDepError "split"))
            (hsPkgs."parsec" or (buildDepError "parsec"))
            (hsPkgs."process" or (buildDepError "process"))
            (hsPkgs."pretty" or (buildDepError "pretty"))
            ];
          buildable = if !flags.test then false else true;
          };
        "parse-tsp-text" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."Decimal" or (buildDepError "Decimal"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."split" or (buildDepError "split"))
            (hsPkgs."parsec" or (buildDepError "parsec"))
            (hsPkgs."process" or (buildDepError "process"))
            (hsPkgs."pretty" or (buildDepError "pretty"))
            ];
          buildable = if !flags.test then false else true;
          };
        "test-tsp" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."Decimal" or (buildDepError "Decimal"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."split" or (buildDepError "split"))
            (hsPkgs."parsec" or (buildDepError "parsec"))
            (hsPkgs."process" or (buildDepError "process"))
            (hsPkgs."pretty" or (buildDepError "pretty"))
            ] ++ (pkgs.lib).optional (!(!flags.test)) (hsPkgs."QuickCheck" or (buildDepError "QuickCheck"));
          buildable = if !flags.test then false else true;
          };
        "gen-tsp" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."Decimal" or (buildDepError "Decimal"))
            (hsPkgs."time" or (buildDepError "time"))
            (hsPkgs."split" or (buildDepError "split"))
            (hsPkgs."parsec" or (buildDepError "parsec"))
            (hsPkgs."process" or (buildDepError "process"))
            (hsPkgs."pretty" or (buildDepError "pretty"))
            (hsPkgs."random" or (buildDepError "random"))
            ] ++ (pkgs.lib).optional (!(!flags.test)) (hsPkgs."QuickCheck" or (buildDepError "QuickCheck"));
          buildable = if !flags.test then false else true;
          };
        };
      };
    }