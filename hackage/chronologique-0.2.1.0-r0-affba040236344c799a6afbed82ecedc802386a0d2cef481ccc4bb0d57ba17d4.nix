let
  buildDepError = pkg:
    builtins.throw ''
      The Haskell package set does not contain the package: ${pkg} (build dependency).
      
      If you are using Stackage, make sure that you are using a snapshot that contains the package. Otherwise you may need to update the Hackage snapshot you are using, usually by updating haskell.nix.
      '';
  sysDepError = pkg:
    builtins.throw ''
      The Nixpkgs package set does not contain the package: ${pkg} (system dependency).
      
      You may need to augment the system package mapping in haskell.nix so that it can be found.
      '';
  pkgConfDepError = pkg:
    builtins.throw ''
      The pkg-conf packages does not contain the package: ${pkg} (pkg-conf dependency).
      
      You may need to augment the pkg-conf package mapping in haskell.nix so that it can be found.
      '';
  exeDepError = pkg:
    builtins.throw ''
      The local executable components do not include the component: ${pkg} (executable dependency).
      '';
  legacyExeDepError = pkg:
    builtins.throw ''
      The Haskell package set does not contain the package: ${pkg} (executable dependency).
      
      If you are using Stackage, make sure that you are using a snapshot that contains the package. Otherwise you may need to update the Hackage snapshot you are using, usually by updating haskell.nix.
      '';
  buildToolDepError = pkg:
    builtins.throw ''
      Neither the Haskell package set or the Nixpkgs package set contain the package: ${pkg} (build tool dependency).
      
      If this is a system dependency:
      You may need to augment the system package mapping in haskell.nix so that it can be found.
      
      If this is a Haskell dependency:
      If you are using Stackage, make sure that you are using a snapshot that contains the package. Otherwise you may need to update the Hackage snapshot you are using, usually by updating haskell.nix.
      '';
in { system, compiler, flags, pkgs, hsPkgs, pkgconfPkgs, config, ... }:
  {
    flags = {};
    package = {
      specVersion = "1.10";
      identifier = { name = "chronologique"; version = "0.2.1.0"; };
      license = "BSD-3-Clause";
      copyright = "Â© 2016-2017 Operational Dynamics Consulting Pty Ltd, and Others";
      maintainer = "Andrew Cowie <andrew@operationaldynamics.com>";
      author = "Andrew Cowie <andrew@operationaldynamics.com>";
      homepage = "";
      url = "";
      synopsis = "Time to manipulate time";
      description = "A simple type useful for representing timestamps as generated by system\nevents, along with conveniences for converting between time types from common\nHaskell time libraries.\n\nOur original use was wanting to conveniently measure things happening on\ndistributed computer systems. Since machine clock cycles are in units of\nnanoseconds, this has the nice property that, assuming the system clock is not\ncorrupted, two subsequent events from the same source process are likely to\nhave monotonically increasing timestamps. And even if the system clock has\nskew, they're still decently likely to be unique per device. These TimeStamps\nthus make good keys when building Maps.\n\nThe core type is in \"Chrono.TimeStamp\", see there for full documentation.";
      buildType = "Simple";
      };
    components = {
      "library" = {
        depends = [
          (hsPkgs."base" or (buildDepError "base"))
          (hsPkgs."time" or (buildDepError "time"))
          (hsPkgs."hourglass" or (buildDepError "hourglass"))
          ];
        buildable = true;
        };
      tests = {
        "experiment" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."chronologique" or (buildDepError "chronologique"))
            ];
          buildable = false;
          };
        "check" = {
          depends = [
            (hsPkgs."base" or (buildDepError "base"))
            (hsPkgs."hspec" or (buildDepError "hspec"))
            (hsPkgs."hourglass" or (buildDepError "hourglass"))
            (hsPkgs."QuickCheck" or (buildDepError "QuickCheck"))
            (hsPkgs."chronologique" or (buildDepError "chronologique"))
            ];
          buildable = true;
          };
        };
      };
    }